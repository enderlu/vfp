package main

import (
	"flag"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"io"
	"os"
	"path"
	"strings"
)

func print(w io.Writer, pkg *ast.Package, kind ast.ObjKind, format string) {
	for _, f := range pkg.Files {
		for name, object := range f.Scope.Objects {
			if object.Kind == kind && (unexported || ast.IsExported(name)) {
				fmt.Fprintf(w, format, name, name)
			}
		}
	}
}

func filter(info os.FileInfo) bool {
	name := info.Name()
	return !info.IsDir() && name != gofile && path.Ext(name) == ".go" && !strings.HasSuffix(name, "_test.go")
}

func parseDir(dir string) {
	dirFile, err := os.Open(dir)
	if err != nil {
		panic(err)
	}
	defer dirFile.Close()
	info, err := dirFile.Stat()
	if err != nil {
		panic(err)
	}
	if !info.IsDir() {
		panic("Path is not a directory: " + dir)
	}

	pkgs, err := parser.ParseDir(token.NewFileSet(), dir, filter, 0)
	if err != nil {
		panic(err)
	}
	for _, pkg := range pkgs {
		file, err := os.Create(path.Join(dir, gofile))
		if err != nil {
			panic(err)
		}
		defer file.Close()
		fmt.Fprintln(file, "// File generated by github.com/ungerik/pkgreflect")
		fmt.Fprintln(file, "package", pkg.Name)
		fmt.Fprintln(file, "")
		fmt.Fprintln(file, `import "reflect"`)
		fmt.Fprintln(file, "")

		// Types
		if !notypes {
			fmt.Fprintln(file, "var Types = map[string]reflect.Type{")
			print(file, pkg, ast.Typ, "\t\"%s\": reflect.TypeOf((*%s)(nil)).Elem(),\n")
			fmt.Fprintln(file, "}")
			fmt.Fprintln(file, "")
		}

		// Functions
		if !nofuncs {
			fmt.Fprintln(file, "var Functions = map[string]reflect.Value{")
			print(file, pkg, ast.Fun, "\t\"%s\": reflect.ValueOf(%s),\n")
			fmt.Fprintln(file, "}")
			fmt.Fprintln(file, "")
		}

		if !novars {
			// Addresses of variables
			fmt.Fprintln(file, "var Variables = map[string]reflect.Value{")
			print(file, pkg, ast.Var, "\t\"%s\": reflect.ValueOf(&%s),\n")
			fmt.Fprintln(file, "}")
			fmt.Fprintln(file, "")
		}
	}

	if !norecurs {
		dirs, err := dirFile.Readdir(-1)
		if err != nil {
			panic(err)
		}
		for _, info := range dirs {
			if info.IsDir() {
				parseDir(path.Join(dir, info.Name()))
			}
		}
	}
}

var (
	notypes    bool
	nofuncs    bool
	novars     bool
	unexported bool
	norecurs   bool
	gofile     string
)

func main() {
	flag.BoolVar(&notypes, "notypes", false, "Don't list package types")
	flag.BoolVar(&nofuncs, "nofuncs", false, "Don't list package functions")
	flag.BoolVar(&novars, "novars", false, "Don't list package variables")
	flag.BoolVar(&unexported, "unexported", false, "Also list unexported names")
	flag.BoolVar(&norecurs, "norecurs", false, "Don't parse sub-directories resursively")
	flag.StringVar(&gofile, "gofile", "pkgreflect.go", "Name of the generated .go file")
	flag.Parse()

	if len(flag.Args()) > 0 {
		for _, dir := range flag.Args() {
			parseDir(dir)
		}
	} else {
		parseDir(".")
	}
}
