// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// See malloc.h for overview.
//
// TODO(rsc): double-check stats.

package vfp
#include "runtime.h"
#include "arch_GOARCH.h"
#include "malloc.h"
#include "type.h"
#include "typekind.h"
#include "race.h"


#pragma textflag 7
void
runtime·CreateObject(Type *typ, uint8 *ret)
{
	uint32 flag;

	if(raceenabled)
		m->racepc = runtime·getcallerpc(&typ);

	if(typ->size == 0) {
		// All 0-length allocations use this pointer.
		// The language does not require the allocations to
		// have distinct values.
		ret = (uint8*)&runtime·zerobase;
	} else {
		flag = typ->kind&KindNoPointers ? FlagNoPointers : 0;
		ret = runtime·mallocgc(typ->size, flag, 1, 1);

		if(UseSpanType && !flag) {
			if(false) {
				runtime·printf("new %S: %p\n", *typ->string, ret);
			}
			runtime·settype(ret, (uintptr)typ | TypeInfo_SingleObject);
		}
	}

	FLUSH(&ret);
}
